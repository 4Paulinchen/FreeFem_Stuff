/* Solving the Convection diffusion equation on square*/

// Parameters
real R=1, xc=0, yc=0 , tmax=0.3,dt=0.1;
// velocitiy 1d in x
real v=0.01 ;
// Diff
real nu = 0.01; // diffusity


real ue=1; // inital condition outside
// border
int breite=1;
int hoehe=1;
border a(t=0,breite){x=t; y=0;label=1;};
border b(t=0,hoehe){ x=breite; y=t;label=2;};
border c(t=breite,0){ x=t; y=hoehe;label=3;};
border d(t=hoehe,0){ x=0; y=t;label=4;};

int n = 40;
// Mesh 
mesh Th= buildmesh(a(0.6*n)+b(0.3*n)+c(1*n)+d(4*n));


//plot(Th,wait=1,cmm="border");
plot(Th,cmm="mesh",ps="mesh.eps");

// FE space
fespace Vh(Th, P2);

// Variational (weak formulation)
Vh uh,vh,uhold=0; // u=unknown, v=test function

// Data of the problem
func phileft=1; // RHS (source) function

// Values

 func f=0;                 //  right hand side function 
 func g=1;                  //  boundary condition function
 nu=0.001;                  // Diffusity
 // ut + du''- vu'=f  du/dn=0 on 2 u=g on 4 u=0 on 1 and 3
 // Implicit method


 problem laplace(uh,vh,solver=GMRES,tgv=1e5) =   //  definion of  the problem 
   - int2d(Th)( nu*(dx(uh)*dx(vh) + dy(uh)*dy(vh)) ) //  bilinear form diffusion term
   + int1d(Th)( v *dx(uh)*vh ) //  bilinear form convection 1d v*(uh*vh)
  - int2d(Th)( f*vh )    //  linear form int_fv
   -int2d(Th)(uh*vh/dt)   //u_n+1*v/dt
  -int2d(Th)(uhold*vh/dt)  // u_n*v/dt                        
  + on(4,uh=g) +on(1,3,uh=0);                      //  boundary condition form

//Time loop

real t=0; int iter=0, nplot=2;
verbosity=0;

while (t <= tmax)
{
iter++;
t+=dt; 
laplace; // solve the problem plot(uh) // to see the result
/*
if(!(iter%nplot))    // visualisation every nplot
{

plot(uh,cmm="Time T="+t,fill=1);

} */
uhold=uh;
plot(uh,ps="ConvDiff.eps",value=true,fill=1);

}


/*
//
//  Write gnuplot data.
//
ofstream dataunit ( "data.txt" );
for ( int i = 0; i < Th.nt; i++ )
{
  for ( int j = 0; j <= 3; j++ )
  {
    int jj = ( j % 3 );
    dataunit << "  " << Th[i][jj].x 
             << "  " << Th[i][jj].y
             << "  " << uh[][Vh(i,jj)] << "\n";
  }
}
 

//
//  Write gnuplot commands.
//
ofstream commandunit ( "plotConvdiff.txt" );
commandunit << "# plot.txt\n";
commandunit << "# usage: gnuplot < plotConvdiff.txt\n";
commandunit << "#\n";
commandunit << "set term png\n";
commandunit << "set size ratio -1\n";
commandunit << "set output 'CD.png'\n";
commandunit << "unset surface\n";
commandunit << "unset key\n";
commandunit << "set view map\n";
commandunit << "set contour\n";
commandunit << "set cntrparam levels 10\n";
commandunit << "set xlabel 'x'\n";
commandunit << "set ylabel 'y'\n";
commandunit << "set title 'Solution contour'\n";
commandunit << "set timestamp\n";
commandunit << "set dgrid3d 10, 10, 1\n";
commandunit << "set pm3d\n";
commandunit << "set cntrparam cubicspline\n";  // smooth out the lines
commandunit << "set cntrparam levels 10\n"   ; // sets the num of contour lines
commandunit << "set pm3d interpolate 30,30\n" ;// interpolate the color
 
// Set a nice color palette
commandunit << "set palette rgb 30,31,32;\n";
commandunit << "splot 'plotConvdiff.txt' with linesp\n"; */


